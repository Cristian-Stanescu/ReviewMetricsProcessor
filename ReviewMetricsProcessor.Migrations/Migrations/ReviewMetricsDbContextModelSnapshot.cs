// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReviewMetricsProcessor.Data;

#nullable disable

namespace ReviewMetricsProcessor.Migrations.Migrations
{
    [DbContext(typeof(ReviewMetricsDbContext))]
    partial class ReviewMetricsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReviewMetricsProcessor.Data.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double?>("AverageReviewDuration")
                        .HasColumnType("double precision")
                        .HasColumnName("average_review_duration");

                    b.Property<double>("LinesOfCodeReviewedPerHour")
                        .HasColumnType("double precision")
                        .HasColumnName("lines_of_code_reviewed_per_hour");

                    b.Property<double>("TotalLinesOfCodeReviewed")
                        .HasColumnType("double precision")
                        .HasColumnName("total_lines_of_code_reviewed");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("ReviewMetricsProcessor.Data.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text")
                        .HasColumnName("author_id");

                    b.Property<DateTime?>("CompletedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_timestamp");

                    b.Property<int?>("LinesOfCode")
                        .HasColumnType("integer")
                        .HasColumnName("lines_of_code");

                    b.Property<DateTime>("StartedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_reviews_author_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("ReviewMetricsProcessor.Data.Entities.Review", b =>
                {
                    b.HasOne("ReviewMetricsProcessor.Data.Entities.Author", null)
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_reviews_authors_author_id");
                });

            modelBuilder.Entity("ReviewMetricsProcessor.Data.Entities.Author", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
